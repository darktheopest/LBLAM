/**
 ▄█        ▄██████▄     ▄████████   ▄▄▄▄███▄▄▄▄      ▄████████    ▄████████ 
███       ███    ███   ███    ███ ▄██▀▀▀███▀▀▀██▄   ███    ███   ███    ███ 
███       ███    ███   ███    ███ ███   ███   ███   ███    ███   ███    █▀  
███       ███    ███  ▄███▄▄▄▄██▀ ███   ███   ███   ███    ███   ███        
███       ███    ███ ▀▀███▀▀▀▀▀   ███   ███   ███ ▀███████████ ▀███████████ 
███       ███    ███ ▀███████████ ███   ███   ███   ███    ███          ███ 
███▌    ▄ ███    ███   ███    ███ ███   ███   ███   ███    ███    ▄█    ███ 
█████▄▄██  ▀██████▀    ███    ███  ▀█   ███   █▀    ███    █▀   ▄████████▀  
▀                      ███    ███                                           
 * Code generated by Lormas Bot Lab
 * All code in this folder belongs to Lormas Bot Lab
 * For any rights, contact support@lormas.net

*/

import { Listener } from '@sapphire/framework';
export class UnhandledRejection extends Listener {
	public constructor(context: Listener.LoaderContext, options: Listener.Options) {
		super(context, {
			...options,
			name: 'unhandledRejection',
			emitter: process,
		});
	}
	public async run(error: Error, promise: Promise<any>) {
        console.error('Unhandled Promise Rejection:', error);
	}
}